name: iOS 빌드 & TestFlight 배포

on:
  push:
    branches: [deploy]
  workflow_dispatch:

jobs:
  build_and_submit:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write # CHANGELOG 읽기
      id-token: write # App Store 인증용 OIDC

    env:
      EXPO_TOKEN: ${{ secrets.EXPO_SECRET_ACCESS_TOKEN }}
      EXPO_APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 버전 확인
        id: current_version
        run: |
          chmod +x .github/scripts/version_manager.sh
          CURRENT_VERSION=$(./.github/scripts/version_manager.sh get | tail -n 1)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "현재 사용할 버전: $CURRENT_VERSION"

      - name: Python 스크립트 실행 권한 설정 (manager)
        run: |
          if [ -f ".github/scripts/changelog_manager.py" ]; then
            chmod +x .github/scripts/changelog_manager.py
            echo "✅ changelog_manager.py 실행 권한 설정 완료"
          else
            echo "⚠️ .github/scripts/changelog_manager.py 파일을 찾을 수 없습니다."
          fi

      # 릴리즈 노트 생성 (CHANGELOG 기반)
      - name: 릴리즈 노트 생성 (CHANGELOG 기반)
        id: release_notes
        run: |
          set -euo pipefail
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"

          # Python 스크립트만 사용하여 릴리즈 노트 생성
          echo "Python 파서로 릴리즈 노트 생성"
          python3 .github/scripts/changelog_manager.py export \
            --version "$CURRENT_VERSION" \
            --output release_notes.txt || true

          # 3) 최종 폴백 메시지
          if [ ! -s release_notes.txt ]; then
            echo "CHANGELOG에서 v$CURRENT_VERSION 항목을 찾지 못했습니다. 기본 메시지를 사용합니다."
            echo "버전 $CURRENT_VERSION 업데이트" > release_notes.txt
            echo "앱 안정성 및 사용자 경험이 개선되었습니다." >> release_notes.txt
          fi

          echo "RELEASE_NOTES_FOUND=true" >> $GITHUB_ENV

          echo "최종 릴리즈 노트 (release_notes.txt):"
          echo "========================================"
          cat release_notes.txt
          echo "========================================"

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - uses: expo/expo-github-action@v8
        with:
          token: ${{ env.EXPO_TOKEN }}
          eas-version: latest

      # 자격 증명 확인 및 설정
      - name: 자격 증명 확인
        run: |
          echo "자격 증명 상태 확인..."
          eas credentials --platform ios --profile production --non-interactive || true

      # 빌드만 수행
      - name: iOS 앱 빌드
        run: |
          echo "iOS 빌드 시작..."
          eas build \
            --platform ios \
            --profile production \
            --non-interactive \
            --clear-cache

      # TestFlight에 제출 (릴리즈 노트 포함)
      - name: TestFlight 제출
        run: |
          echo "TestFlight 제출용 릴리즈 노트:"
          echo "================================"
          cat release_notes.txt
          echo "================================"

          # TestFlight에 제출 (릴리즈 노트 파일 포함)
          eas submit \
            --platform ios \
            --profile production \
            --latest \
            --non-interactive

          # 선택사항: OTA 업데이트 메시지도 같이 설정하려면 아래 주석 해제
          # --message "$(cat release_notes.txt)"

    concurrency:
      group: ios-testflight
      cancel-in-progress: true
