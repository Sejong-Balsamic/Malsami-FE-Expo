name: 📦 iOS 빌드 & 🚀 TestFlight 배포

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_and_submit:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      id-token: write

    env:
      EXPO_TOKEN: ${{ secrets.EXPO_SECRET_ACCESS_TOKEN }}
      EXPO_APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 현재 버전 확인
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '"version":' app.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "현재 버전: $CURRENT_VERSION"

      # 🆕 릴리즈 노트 생성 (CHANGELOG.json에서 파싱)
      - name: 릴리즈 노트 생성
        id: release_notes
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"

          # CHANGELOG.json에서 릴리즈 노트 추출
          if [ -f "CHANGELOG.json" ]; then
            echo "📄 CHANGELOG.json에서 v$CURRENT_VERSION 릴리즈 노트 추출 중..."
            
            python3 << PYTHON_SCRIPT > release_notes.txt
          import json
          import sys

          try:
              with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              version = "$CURRENT_VERSION"
              found = False
              
              for release in data['releases']:
                  if release['version'] == version:
                      found = True
                      
                      # AI가 생성한 모든 카테고리를 동적으로 처리
                      for category_key, items in release['parsed_changes'].items():
                          if items:
                              # 새 형식인지 기존 형식인지 확인
                              if isinstance(items, dict) and 'title' in items and 'items' in items:
                                  title = items['title']
                                  actual_items = items['items']
                              else:
                                  title = category_key.replace('_', ' ').title()
                                  actual_items = items
                              
                              print(f"**{title}**")
                              for item in actual_items:
                                  if item.strip():
                                      print(f"• {item}")
                              print()
                      
                      break
              
              if not found:
                  print(f"v{version} 업데이트")
                  
          except Exception as e:
              print(f"v{version} 업데이트")
          PYTHON_SCRIPT
            
            if [ -s release_notes.txt ]; then
              echo "✅ 릴리즈 노트 추출 성공!"
              echo "📋 추출된 릴리즈 노트:"
              echo "----------------------------------------"
              cat release_notes.txt
              echo "----------------------------------------"
              echo "RELEASE_NOTES_FOUND=true" >> $GITHUB_ENV
            else
              echo "❌ 릴리즈 노트 추출 실패"
              echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
              echo "v$CURRENT_VERSION 업데이트" > release_notes.txt
            fi
          elif [ -f "CHANGELOG.md" ]; then
            echo "📄 CHANGELOG.md에서 v$CURRENT_VERSION 변경사항 추출 중..."
            sed -n "/## \[$CURRENT_VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > current_release_notes.txt
            tail -n +2 current_release_notes.txt > release_notes_clean.txt
            sed '/^$/d; /^---$/d' release_notes_clean.txt > release_notes.txt
            if [ -s release_notes.txt ]; then
              echo "추출된 변경사항:"
              cat release_notes.txt
              echo "RELEASE_NOTES_FOUND=true" >> $GITHUB_ENV
            else
              echo "현재 버전의 변경사항을 찾을 수 없습니다."
              echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
              echo "v$CURRENT_VERSION 업데이트" > release_notes.txt
            fi
          else
            echo "⚠️ CHANGELOG.json과 CHANGELOG.md 파일이 모두 없습니다."
            echo "RELEASE_NOTES_FOUND=false" >> $GITHUB_ENV
            echo "v$CURRENT_VERSION 업데이트" > release_notes.txt
          fi

          # 릴리즈 노트를 GitHub Output으로 설정
          RELEASE_NOTES=$(cat release_notes.txt | tr '\n' '\\n')
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

          echo "📋 최종 릴리즈 노트:"
          cat release_notes.txt

      # 🆕 eas.json에 한국어 릴리즈 노트 동적 추가
      - name: eas.json 업데이트 (한국어 릴리즈 노트 포함)
        run: |
          RELEASE_NOTES="${{ steps.release_notes.outputs.release_notes }}"

          # eas.json에 submit 설정이 없으면 추가
          if ! grep -q '"submit"' eas.json; then
            # eas.json 파일 끝에 submit 설정 추가
            sed -i '$ s/}/,\n  "submit": {\n    "production": {\n      "ios": {\n        "appleId": "${{ secrets.APPLE_ID }}",\n        "ascAppId": "${{ secrets.ASC_APP_ID }}",\n        "appleTeamId": "${{ secrets.APPLE_TEAM_ID }}",\n        "releaseNotes": {\n          "ko-KR": "'"$RELEASE_NOTES"'"\n        }\n      }\n    }\n  }\n}/' eas.json
          else
            # 기존 submit 설정이 있으면 releaseNotes만 업데이트
            python3 << PYTHON_SCRIPT
          import json

          with open('eas.json', 'r', encoding='utf-8') as f:
              data = json.load(f)

          if 'submit' not in data:
              data['submit'] = {}
          if 'production' not in data['submit']:
              data['submit']['production'] = {}
          if 'ios' not in data['submit']['production']:
              data['submit']['production']['ios'] = {}

          data['submit']['production']['ios']['releaseNotes'] = {
              'ko-KR': '$RELEASE_NOTES'
          }

          with open('eas.json', 'w', encoding='utf-8') as f:
              json.dump(data, f, indent=2, ensure_ascii=False)
          PYTHON_SCRIPT
          fi

          echo "eas.json 업데이트 완료 (한국어 릴리즈 노트 포함)"

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm install

      - uses: expo/expo-github-action@v8
        with:
          token: ${{ env.EXPO_TOKEN }}
          eas-version: latest

      - name: 🔨 Build & 🚀 Submit to TestFlight
        run: |
          echo "📋 사용될 한국어 릴리즈 노트:"
          echo "${{ steps.release_notes.outputs.release_notes }}"

          eas build \
            --platform ios \
            --profile production \
            --auto-submit \
            --non-interactive

    concurrency:
      group: ios-testflight
      cancel-in-progress: true
